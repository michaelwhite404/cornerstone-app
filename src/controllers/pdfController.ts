import { Request, Response } from "express";
import PDFPrinter from "pdfmake";
import vfsFonts from "pdfmake/build/vfs_fonts.js";
import CheckoutLog from "../models/checkoutLogModel";
import PopOptions from "../types/popOptions";
import APIFeatures from "../utils/apiFeatures";
import catchAsync from "../utils/catchAsync";
import { TDocumentDefinitions } from "pdfmake/interfaces";

export const getDeviceLogsPDF = catchAsync(async (req: Request, res: Response) => {
  const filter = {};
  const populate = {
    path: "device deviceUser teacherCheckOut teacherCheckIn",
    select: "name brand fullName",
  } as PopOptions;
  !req.query.limit && (req.query.limit = "10000");
  req.query.fields = undefined;
  req.query.sort = "-checkOutDate -checkInDate";

  const query = CheckoutLog.find(filter);
  if (populate) query.populate(populate);
  const features = new APIFeatures(query, req.query).filter().limitFields().sort().paginate();
  const checkoutLogs = await features.query;

  var fonts = {
    Roboto: {
      normal: Buffer.from(vfsFonts.pdfMake.vfs["Roboto-Regular.ttf"], "base64"),
      bold: Buffer.from(vfsFonts.pdfMake.vfs["Roboto-Medium.ttf"], "base64"),
    },
  };

  const body = [["Device", "Checked In", "Student", "Check Out Date", "Check In Date"]];
  checkoutLogs.forEach((log) =>
    body.push([
      log.device.name,
      `${log.checkedIn}`,
      log.deviceUser.fullName,
      log.checkOutDate.toLocaleString(),
      log.checkInDate?.toLocaleString() || "-",
    ])
  );

  const docDefinitions = {} as TDocumentDefinitions;
  // Document Content
  docDefinitions.content = [];
  const content = docDefinitions.content;
  content.push({ text: "Device Checkouts", style: "header" });
  content.push({
    table: {
      widths: ["auto", "auto", "auto", "auto", "auto"],
      body,
    },
    style: "table",
  });
  content.push(`Report Generated By: ${req.employee.fullName}`);
  content.push(`Generated at: ${new Date().toLocaleString()}`);

  // Document Styles
  docDefinitions.styles = {};
  const styles = docDefinitions.styles;
  styles.header = { fontSize: 18, bold: true, margin: [0, 0, 0, 10] };
  styles.table = { fontSize: 11.5, margin: [0, 0, 0, 10] };

  const pdfPrinter = new PDFPrinter(fonts);
  const doc = pdfPrinter.createPdfKitDocument(docDefinitions);
  doc.end();
  res.header("Content-Type", "application/pdf");
  res.header("Content-Disposition", "inline;filename=device-logs.pdf");
  res.status(200);
  doc.pipe(res);
});
